
#Sales Prediction Linear Regression


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


#Reading Data into pandas Data Frame
from google.colab import drive
drive.mount('/content/drive/')

df = pd.read_csv('/content/drive/MyDrive/Datasets/Sales prediction/Advertising.csv')
df


#Data Exploration
df.shape

df.info()

df.describe()

# Columns
df.columns

#Check for duplicates
df.duplicated().sum()

# checking for null values
df.isnull().sum()

import plotly.graph_objects as go

#creating an empty figure
fig = go.Figure()
fig

fig.add_trace(go.Scatter(x=df['TV'], y=df['Sales'], mode='markers', marker=dict(color='blue')))
## Here we update these values under function attributes such as title,xaxis_title and yaxis_title
fig.update_layout(title='TV Sales', xaxis_title='TV', yaxis_title='Sales')
# Display the figure
fig.show()

fig.add_trace(go.Scatter(x=df['Radio'], y=df['Sales'], mode='markers', marker=dict(color='blue')))
## Here we update these values under function attributes such as title,xaxis_title and yaxis_title
fig.update_layout(title='Radio Sales', xaxis_title='Radio', yaxis_title='Sales')
# Display the figure
fig.show()


fig.add_trace(go.Scatter(x=df['Newspaper'], y=df['Sales'], mode='markers', marker=dict(color='blue')))
## Here we update these values under function attributes such as title,xaxis_title and yaxis_title
fig.update_layout(title='Newspaper Sales', xaxis_title='Newspaper', yaxis_title='Sales')
# Display the figure
fig.show()

X = df.drop('Sales', axis=1)
X


X = X.drop(columns='Unnamed: 0')
X

Y = df[['Sales']]
Y


from sklearn.model_selection import train_test_split
X_train, X_test, Y_train,Y_test = train_test_split(X,Y,test_size = 0.20, random_state = 0)


#Importing Linear Regression Library
from sklearn.linear_model import LinearRegression

# creating a Linear regression object
lr = LinearRegression()
lr

#Model Training
lr.fit(X_train, Y_train)

#predictions

Y_predict = lr.predict(X_test)

Y_predict


#Model Evaluation
from sklearn import metrics

print('Mean Absolute Error: ',metrics.mean_absolute_error(Y_predict,Y_test))

print('Root Mean Squared Error:',np.sqrt(metrics.mean_squared_error(Y_predict,Y_test)))

print('R-Squared: ',metrics.r2_score(Y_predict,Y_test))


#"------------------End------------------"
